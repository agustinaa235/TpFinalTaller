#include <SDL2/SDL.h>
#include <SDL2/SDL_video.h>
#include <SDL2/SDL_render.h>
#include "../include/SdlException.h"
#include "../include/SdlWindow.h"
#include <iostream>


SdlWindow::SdlWindow(int width, int height) :
        width(width), height(height) {
    int errCode = SDL_Init(SDL_INIT_VIDEO);
    if (errCode) {
        throw SdlException("Error en la inicializaciÃ³n", SDL_GetError());
    }
    errCode = SDL_CreateWindowAndRenderer(
        width, height, SDL_RENDERER_ACCELERATED,
        &this->window, &this->renderer);
    if (errCode) {
        throw SdlException("Error al crear ventana", SDL_GetError());
    }
}


SdlWindow::~SdlWindow() {
    std::cout << "Destruyendo\n"
                 "# add source files here\n"
                 "SRCS := #file-name.c\n"
                 "\n"
                 "# generate names of object files\n"
                 "OBJS := $(SRCS:.c=.o)\n"
                 "\n"
                 "# name of executable\n"
                 "EXEC := #name your executable file\n"
                 "\n"
                 "# default recipe\n"
                 "all: $(EXEC)\n"
                 " \n"
                 "showfont: showfont.c Makefile\n"
                 "    $(CC) -o $@ $@.c $(CFLAGS) $(LIBS)\n"
                 "\n"
                 "glfont: glfont.c Makefile\n"
                 "    $(CC) -o $@ $@.c $(CFLAGS) $(LIBS)\n"
                 "\n"
                 "# recipe for building the final executable\n"
                 "$(EXEC): $(OBJS) $(HDRS) Makefile\n"
                 "    $(CC) -o $@ $(OBJS) $(CFLAGS)\n"
                 "\n"
                 "# recipe for building object files\n"
                 "#$(OBJS): $(@:.o=.c) $(HDRS) Makefile\n"
                 "#    $(CC) -o $@ $(@:.o=.c) -c $(CFLAGS)\n"
                 "\n"
                 "# recipe to clean the workspace\n"
                 "clean:\n"
                 "    rm -f $(EXEC) $(OBJS)\n"
                 "\n"
                 ".PHONY: all clean\n"
                 "Header Files:\n"
                 "\n"
                 "filter_none\n"
                 "edit\n"
                 "play_arrow\n"
                 "\n"
                 "brightness_4\n"
                 "// for initializing and sutdown functions \n"
                 "#include <SDL2/SDL.h> \n"
                 "  \n"
                 "// for rendering images and graphics on screen \n"
                 "#include <SDL2/SDL_image.h> \n"
                 "  \n"
                 "// for using SDL_Delay() functions \n"
                 "#include <SDL2/SDL_timer.h> \n"
                 "Initialization:\n"
                 "\n"
                 "\n"
                 "\n"
                 "filter_none\n"
                 "edit\n"
                 "play_arrow\n"
                 "\n"
                 "brightness_4\n"
                 "#include <SDL2/SDL.h> \n"
                 "#include <SDL2/SDL_image.h> \n"
                 "#include <SDL2/SDL_timer.h> \n"
                 "  \n"
                 "int main() \n"
                 "{ \n"
                 "  \n"
                 "    // retutns zero on success else non-zero \n"
                 "    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) { \n"
                 "        printf(\"error initializing SDL: %s\\n\", SDL_GetError()); \n"
                 "    } \n"
                 "    SDL_Window* win = SDL_CreateWindow(\"GAME\", \n"
                 "                                       SDL_WINDOWPOS_CENTERED, \n"
                 "                                       SDL_WINDOWPOS_CENTERED, \n"
                 "                                       1000, 1000, 0); \n"
                 "    while (1) \n"
                 "        ; \n"
                 "  \n"
                 "    return 0; \n"
                 "} \n"
                 "That will create a empty window on your screen.\n"
                 "Output:\n"
                 "\n"
                 "\n"
                 "We will write a simple program to explain rendering and I/O handling:\n"
                 "\n"
                 "filter_none\n"
                 "edit\n"
                 "play_arrow\n"
                 "\n"
                 "brightness_4\n"
                 "#include <SDL2/SDL.h> \n"
                 "#include <SDL2/SDL_image.h> \n"
                 "#include <SDL2/SDL_timer.h> \n"
                 "  \n"
                 "int main() \n"
                 "{ \n"
                 "  \n"
                 "    // retutns zero on success else non-zero \n"
                 "    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) { \n"
                 "        printf(\"error initializing SDL: %s\\n\", SDL_GetError()); \n"
                 "    } \n"
                 "    SDL_Window* win = SDL_CreateWindow(\"GAME\", // creates a window \n"
                 "                                       SDL_WINDOWPOS_CENTERED, \n"
                 "                                       SDL_WINDOWPOS_CENTERED, \n"
                 "                                       1000, 1000, 0); \n"
                 "  \n"
                 "    // triggers the program that controls \n"
                 "    // your graphics hardware and sets flags \n"
                 "    Uint32 render_flags = SDL_RENDERER_ACCELERATED; \n"
                 "  \n"
                 "    // creates a renderer to render our images \n"
                 "    SDL_Renderer* rend = SDL_CreateRenderer(win, -1, render_flags); \n"
                 "  \n"
                 "    // creates a surface to load an image into the main memory \n"
                 "    SDL_Surface* surface; \n"
                 "  \n"
                 "    // please provide a path for your image \n"
                 "    surface = IMG_Load(\"path\"); \n"
                 "  \n"
                 "    // loads image to our graphics hardware memory. \n"
                 "    SDL_Texture* tex = SDL_CreateTextureFromSurface(rend, surface); \n"
                 "  \n"
                 "    // clears main-memory \n"
                 "    SDL_FreeSurface(surface); \n"
                 "  \n"
                 "    // let us control our image position \n"
                 "    // so that we can move it with our keyboard. \n"
                 "    SDL_Rect dest; \n"
                 "  \n"
                 "    // connects our texture with dest to control position \n"
                 "    SDL_QueryTexture(tex, NULL, NULL, &dest.w, &dest.h); \n"
                 "  \n"
                 "    // adjust height and width of our image box. \n"
                 "    dest.w /= 6; \n"
                 "    dest.h /= 6; \n"
                 "  \n"
                 "    // sets initial x-position of object \n"
                 "    dest.x = (1000 - dest.w) / 2; \n"
                 "  \n"
                 "    // sets initial y-position of object \n"
                 "    dest.y = (1000 - dest.h) / 2; \n"
                 "  \n"
                 "    // controls annimation loop \n"
                 "    int close = 0; \n"
                 "  \n"
                 "    // speed of box \n"
                 "    int speed = 300; \n"
                 "  \n"
                 "    // annimation loop \n"
                 "    while (!close) { \n"
                 "        SDL_Event event; \n"
                 "  \n"
                 "        // Events mangement \n"
                 "        while (SDL_PollEvent(&event)) { \n"
                 "            switch (event.type) { \n"
                 "  \n"
                 "            case SDL_QUIT: \n"
                 "                // handling of close button \n"
                 "                close = 1; \n"
                 "                break; \n"
                 "  \n"
                 "            case SDL_KEYDOWN: \n"
                 "                // keyboard API for key pressed \n"
                 "                switch (event.key.keysym.scancode) { \n"
                 "                case SDL_SCANCODE_W: \n"
                 "                case SDL_SCANCODE_UP: \n"
                 "                    dest.y -= speed / 30; \n"
                 "                    break; \n"
                 "                case SDL_SCANCODE_A: \n"
                 "                case SDL_SCANCODE_LEFT: \n"
                 "                    dest.x -= speed / 30; \n"
                 "                    break; \n"
                 "                case SDL_SCANCODE_S: \n"
                 "                case SDL_SCANCODE_DOWN: \n"
                 "                    dest.y += speed / 30; \n"
                 "                    break; \n"
                 "                case SDL_SCANCODE_D: \n"
                 "                case SDL_SCANCODE_RIGHT: \n"
                 "                    dest.x += speed / 30; \n"
                 "                    break; \n"
                 "                } \n"
                 "            } \n"
                 "        } \n"
                 "  \n"
                 "        // right boundary \n"
                 "        if (dest.x + dest.w > 1000) \n"
                 "            dest.x = 1000 - dest.w; \n"
                 "  \n"
                 "        // left boundary \n"
                 "        if (dest.x < 0) \n"
                 "            dest.x = 0; \n"
                 "  \n"
                 "        // bottom boundary \n"
                 "        if (dest.y + dest.h > 1000) \n"
                 "            dest.y = 1000 - dest.h; \n"
                 "  \n"
                 "        // upper boundary \n"
                 "        if (dest.y < 0) \n"
                 "            dest.y = 0; \n"
                 "  \n"
                 "        // clears the screen \n"
                 "        SDL_RenderClear(rend); \n"
                 "        SDL_RenderCopy(rend, tex, NULL, &dest); \n"
                 "  \n"
                 "        // triggers the double buffers \n"
                 "        // for multiple rendering \n"
                 "        SDL_RenderPresent(rend); \n"
                 "  \n"
                 "        // calculates to 60 fps \n"
                 "        SDL_Delay(1000 / 60); \n"
                 "    } \n"
                 "  \n"
                 "    // destroy texture \n"
                 "    SDL_DestroyTexture(tex); \n"
                 "  \n"
                 "    // destroy renderer \n"
                 "    SDL_DestroyRenderer(rend); \n"
                 "  \n"
                 "    // destroy window \n"
                 "    SDL_DestroyWindow(win); \n"
                 "    return 0; \n"
                 "} \n"
                 "That will render a image on the window which can be controlled via your keyboard up, down, left, right.\n"
                 "Output:\n"
                 "Video Player\n"
                 "\n"
                 "00:00\n"
                 "00:20\n"
                 "\n"
                 "\n"
                 "References: https://www.libsdl.org/, https://github.com/vivek9236/rocket_game\n"
                 "\n"
                 "Attention reader! Donât stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready.\n"
                 "\n"
                 "\n"
                 "\n"
                 "\n"
                 "Recommended Posts:\n"
                 "ctype.h(<cctype>) library in C/C++ with Examples\n"
                 "How to print range of basic data types without any library function and constant in C?\n"
                 "Unordered Sets in C++ Standard Template Library\n"
                 "Advanced C++ with boost library\n"
                 "Inbuilt library functions for user Input | scanf, fscanf, sscanf, scanf_s, fscanf_s, sscanf_s\n"
                 "How to add \"graphics.h\" C/C++ library to gcc compiler in Linux\n"
                 "The C++ Standard Template Library (STL)\n"
                 "List in C++ Standard Template Library (STL)\n"
                 "Deque in C++ Standard Template Library (STL)\n"
                 "Map in C++ Standard Template Library (STL)\n"
                 "Wide char and library functions in C++\n"
                 "C Library math.h functions\n"
                 "isgraph() C library function\n"
                 "difftime() C library function\n"
                 "wcstof function in C library\n"
                 "wprintf() and wscanf in C Library\n"
                 "snprintf() in C library\n"
                 "boost::split in C++ library\n"
                 "<iterator> library in C++ STL\n"
                 "Factorial of Large Number Using boost multiprecision Library\n"
                 "\n"
                 "VivekAgrawal3\n"
                 "Check out this Author's contributed articles.\n"
                 "If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\n"
                 "\n"
                 "Please Improve this article if you find anything incorrect by clicking on the \"Improve Article\" button below.\n"
                 "\n"
                 "\n"
                 "\n"
                 "Improved By : roshanr2001\n"
                 "\n"
                 "Article Tags : \n"
                 "C\n"
                 "C++\n"
                 "Project\n"
                 "OpenGL\n"
                 "Practice Tags : \n"
                 "C\n"
                 "CPP\n"
                 "\n"
                 "thumb_up\n"
                 "2\n"
                 "\n"
                 "\n"
                 " \n"
                 "0\n"
                 "\n"
                 "No votes yet.\n"
                 "Improve Article  \n"
                 "Please write to us at contribute@geeksforgeeks.org to report any issue with the above content.\n"
                 "Post navigation\n"
                 "Previous\n"
                 "first_page Shuffle an Array using STL in C++\n"
                 "Next\n"
                 "last_pageWhat does main() return in C and C++?\n"
                 "\n"
                 "\n"
                 "\n"
                 "\n"
                 "Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.\n"
                 "\n"
                 "\n"
                 "Load Comments\n"
                 "auto" << std::endl;
    if (this->renderer) {
        SDL_DestroyRenderer(this->renderer);
        this->renderer = nullptr;
    }

    if (this->window) {
        SDL_DestroyWindow(this->window);
        this->window = nullptr;
    }
}

void SdlWindow::fill(int r, int g, int b, int alpha) {
    SDL_SetRenderDrawColor(this->renderer,
                           r, g, b, alpha);
    SDL_RenderClear(this->renderer);
}

void SdlWindow::fill() {
    this->fill(0x33,0x33,0x33,0xFF);
}

void SdlWindow::render() {
    SDL_RenderPresent(this->renderer);
}


SDL_Renderer* SdlWindow::getRenderer() const {
    return this->renderer;
}
